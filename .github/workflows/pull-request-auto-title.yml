name: Auto Generate PR Title and Description

on:
  pull_request:
    types: [opened, edited]

jobs:
  generate-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Garante o histórico completo

      - name: Fetch all remote branches
        run: git fetch origin +refs/heads/main:refs/remotes/origin/main  # Força o fetch da branch 'main'

      - name: Verify that 'main' branch exists
        run: |
          # Verifica se a branch 'main' está disponível no repositório local
          if git show-ref --verify --quiet refs/remotes/origin/main; then
            echo "Branch 'main' disponível."
          else
            echo "Erro: A branch 'main' não foi encontrada."
            exit 1
          fi

      - name: Get current branch name
        id: get_branch
        run: echo "::set-output name=branch_name::$(git rev-parse --abbrev-ref HEAD)"

      - name: Get all commit messages
        id: get_commits
        run: |
          # Garante que estamos comparando corretamente as revisões entre 'main' e a branch atual
          COMMITS=$(git log --pretty=format:"%s" origin/main..HEAD --)  # Usa '--' para separar revisões de caminhos
          echo "::set-output name=commits::$COMMITS"

      - name: Analyze commits and generate PR title/description
        id: generate_pr_title
        run: |
          COMMITS="${{ steps.get_commits.outputs.commits }}"
          BRANCH_NAME="${{ steps.get_branch.outputs.branch_name }}"

          # Extrai detalhes da branch
          TASK_ID=$(echo "$BRANCH_NAME" | cut -d'-' -f1)
          TAG_TIPO=$(echo "$BRANCH_NAME" | cut -d'-' -f2 | cut -d'/' -f1)
          DESCRICAO_BRANCH=$(echo "$BRANCH_NAME" | cut -d'/' -f2)

          # Analisa os commits e gera o título com base nos commits
          if echo "$COMMITS" | grep -q '^func'; then
              TITLE="Funcionalidade: $DESCRICAO_BRANCH - Task #$TASK_ID"
          elif echo "$COMMITS" | grep -q '^corr'; then
              TITLE="Correção: $DESCRICAO_BRANCH - Task #$TASK_ID"
          elif echo "$COMMITS" | grep -q '^docs'; then
              TITLE="Documentação: $DESCRICAO_BRANCH - Task #$TASK_ID"
          elif echo "$COMMITS" | grep -q '^mant'; then
              TITLE="Manutenção: $DESCRICAO_BRANCH - Task #$TASK_ID"
          elif echo "$COMMITS" | grep -q '^oper'; then
              TITLE="Operacional: $DESCRICAO_BRANCH - Task #$TASK_ID"
          else
              TITLE="Atualização: $DESCRICAO_BRANCH - Task #$TASK_ID"
          fi

          # Cria o corpo da PR com a lista de commits
          DESCRIPTION="## Commits\n$COMMITS"

          echo "::set-output name=pr_title::$TITLE"
          echo "::set-output name=pr_body::$DESCRIPTION"

      - name: Update PR with title and description
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Auto-generated PR title and description"
          title: ${{ steps.generate_pr_title.outputs.pr_title }}
          body: ${{ steps.generate_pr_title.outputs.pr_body }}
          branch: ${{ steps.get_branch.outputs.branch_name }}
